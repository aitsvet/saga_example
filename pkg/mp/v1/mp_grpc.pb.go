// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: v1/mp.proto

package mp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Marketplace_CreateAd_FullMethodName      = "/marketplace.Marketplace/CreateAd"
	Marketplace_ListAds_FullMethodName       = "/marketplace.Marketplace/ListAds"
	Marketplace_Order_FullMethodName         = "/marketplace.Marketplace/Order"
	Marketplace_ListOrders_FullMethodName    = "/marketplace.Marketplace/ListOrders"
	Marketplace_Ship_FullMethodName          = "/marketplace.Marketplace/Ship"
	Marketplace_ListShipments_FullMethodName = "/marketplace.Marketplace/ListShipments"
	Marketplace_Receive_FullMethodName       = "/marketplace.Marketplace/Receive"
	Marketplace_ListStatuses_FullMethodName  = "/marketplace.Marketplace/ListStatuses"
)

// MarketplaceClient is the client API for Marketplace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketplaceClient interface {
	CreateAd(ctx context.Context, in *AdRequest, opts ...grpc.CallOption) (*Empty, error)
	ListAds(ctx context.Context, in *ListAdsRequest, opts ...grpc.CallOption) (Marketplace_ListAdsClient, error)
	Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*Empty, error)
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (Marketplace_ListOrdersClient, error)
	Ship(ctx context.Context, in *ShipmentRequest, opts ...grpc.CallOption) (*Empty, error)
	ListShipments(ctx context.Context, in *ListShipmentsRequest, opts ...grpc.CallOption) (Marketplace_ListShipmentsClient, error)
	Receive(ctx context.Context, in *DeliveryRequest, opts ...grpc.CallOption) (*Empty, error)
	ListStatuses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Dictionary, error)
}

type marketplaceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketplaceClient(cc grpc.ClientConnInterface) MarketplaceClient {
	return &marketplaceClient{cc}
}

func (c *marketplaceClient) CreateAd(ctx context.Context, in *AdRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Marketplace_CreateAd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) ListAds(ctx context.Context, in *ListAdsRequest, opts ...grpc.CallOption) (Marketplace_ListAdsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Marketplace_ServiceDesc.Streams[0], Marketplace_ListAds_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &marketplaceListAdsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Marketplace_ListAdsClient interface {
	Recv() (*AdResponse, error)
	grpc.ClientStream
}

type marketplaceListAdsClient struct {
	grpc.ClientStream
}

func (x *marketplaceListAdsClient) Recv() (*AdResponse, error) {
	m := new(AdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marketplaceClient) Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Marketplace_Order_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (Marketplace_ListOrdersClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Marketplace_ServiceDesc.Streams[1], Marketplace_ListOrders_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &marketplaceListOrdersClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Marketplace_ListOrdersClient interface {
	Recv() (*OrderResponse, error)
	grpc.ClientStream
}

type marketplaceListOrdersClient struct {
	grpc.ClientStream
}

func (x *marketplaceListOrdersClient) Recv() (*OrderResponse, error) {
	m := new(OrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marketplaceClient) Ship(ctx context.Context, in *ShipmentRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Marketplace_Ship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) ListShipments(ctx context.Context, in *ListShipmentsRequest, opts ...grpc.CallOption) (Marketplace_ListShipmentsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Marketplace_ServiceDesc.Streams[2], Marketplace_ListShipments_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &marketplaceListShipmentsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Marketplace_ListShipmentsClient interface {
	Recv() (*ShipmentResponse, error)
	grpc.ClientStream
}

type marketplaceListShipmentsClient struct {
	grpc.ClientStream
}

func (x *marketplaceListShipmentsClient) Recv() (*ShipmentResponse, error) {
	m := new(ShipmentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marketplaceClient) Receive(ctx context.Context, in *DeliveryRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Marketplace_Receive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceClient) ListStatuses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Dictionary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Dictionary)
	err := c.cc.Invoke(ctx, Marketplace_ListStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketplaceServer is the server API for Marketplace service.
// All implementations must embed UnimplementedMarketplaceServer
// for forward compatibility
type MarketplaceServer interface {
	CreateAd(context.Context, *AdRequest) (*Empty, error)
	ListAds(*ListAdsRequest, Marketplace_ListAdsServer) error
	Order(context.Context, *OrderRequest) (*Empty, error)
	ListOrders(*ListOrdersRequest, Marketplace_ListOrdersServer) error
	Ship(context.Context, *ShipmentRequest) (*Empty, error)
	ListShipments(*ListShipmentsRequest, Marketplace_ListShipmentsServer) error
	Receive(context.Context, *DeliveryRequest) (*Empty, error)
	ListStatuses(context.Context, *Empty) (*Dictionary, error)
	mustEmbedUnimplementedMarketplaceServer()
}

// UnimplementedMarketplaceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketplaceServer struct {
}

func (UnimplementedMarketplaceServer) CreateAd(context.Context, *AdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAd not implemented")
}
func (UnimplementedMarketplaceServer) ListAds(*ListAdsRequest, Marketplace_ListAdsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAds not implemented")
}
func (UnimplementedMarketplaceServer) Order(context.Context, *OrderRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (UnimplementedMarketplaceServer) ListOrders(*ListOrdersRequest, Marketplace_ListOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedMarketplaceServer) Ship(context.Context, *ShipmentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ship not implemented")
}
func (UnimplementedMarketplaceServer) ListShipments(*ListShipmentsRequest, Marketplace_ListShipmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListShipments not implemented")
}
func (UnimplementedMarketplaceServer) Receive(context.Context, *DeliveryRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedMarketplaceServer) ListStatuses(context.Context, *Empty) (*Dictionary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatuses not implemented")
}
func (UnimplementedMarketplaceServer) mustEmbedUnimplementedMarketplaceServer() {}

// UnsafeMarketplaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketplaceServer will
// result in compilation errors.
type UnsafeMarketplaceServer interface {
	mustEmbedUnimplementedMarketplaceServer()
}

func RegisterMarketplaceServer(s grpc.ServiceRegistrar, srv MarketplaceServer) {
	s.RegisterService(&Marketplace_ServiceDesc, srv)
}

func _Marketplace_CreateAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).CreateAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Marketplace_CreateAd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).CreateAd(ctx, req.(*AdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketplace_ListAds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAdsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketplaceServer).ListAds(m, &marketplaceListAdsServer{ServerStream: stream})
}

type Marketplace_ListAdsServer interface {
	Send(*AdResponse) error
	grpc.ServerStream
}

type marketplaceListAdsServer struct {
	grpc.ServerStream
}

func (x *marketplaceListAdsServer) Send(m *AdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Marketplace_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Marketplace_Order_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).Order(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketplace_ListOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketplaceServer).ListOrders(m, &marketplaceListOrdersServer{ServerStream: stream})
}

type Marketplace_ListOrdersServer interface {
	Send(*OrderResponse) error
	grpc.ServerStream
}

type marketplaceListOrdersServer struct {
	grpc.ServerStream
}

func (x *marketplaceListOrdersServer) Send(m *OrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Marketplace_Ship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).Ship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Marketplace_Ship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).Ship(ctx, req.(*ShipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketplace_ListShipments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListShipmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketplaceServer).ListShipments(m, &marketplaceListShipmentsServer{ServerStream: stream})
}

type Marketplace_ListShipmentsServer interface {
	Send(*ShipmentResponse) error
	grpc.ServerStream
}

type marketplaceListShipmentsServer struct {
	grpc.ServerStream
}

func (x *marketplaceListShipmentsServer) Send(m *ShipmentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Marketplace_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Marketplace_Receive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).Receive(ctx, req.(*DeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketplace_ListStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServer).ListStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Marketplace_ListStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServer).ListStatuses(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Marketplace_ServiceDesc is the grpc.ServiceDesc for Marketplace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Marketplace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "marketplace.Marketplace",
	HandlerType: (*MarketplaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAd",
			Handler:    _Marketplace_CreateAd_Handler,
		},
		{
			MethodName: "Order",
			Handler:    _Marketplace_Order_Handler,
		},
		{
			MethodName: "Ship",
			Handler:    _Marketplace_Ship_Handler,
		},
		{
			MethodName: "Receive",
			Handler:    _Marketplace_Receive_Handler,
		},
		{
			MethodName: "ListStatuses",
			Handler:    _Marketplace_ListStatuses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAds",
			Handler:       _Marketplace_ListAds_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListOrders",
			Handler:       _Marketplace_ListOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListShipments",
			Handler:       _Marketplace_ListShipments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/mp.proto",
}
